openapi: "3.0.3"
info:
  title: EIDA WFCatalog Web Service
  description: >-
    API documentation of the EIDAWS WFCatalog service which provides access to
    waveform metadata.
  termsOfService: https://www.orfeus-eu.org/data/eida/webservices/
  version: 1.0.0
servers:
- url: http://eida-federator.ethz.ch/eidaws/wfcatalog/1
tags:
- name: WFCatalog
  description: |-
    **Waveform data catalog**
    Request options under ***Sample Metrics***, ***Header Flag*** and ***Timing Quality*** can be filtered by appending a range filtering syntax to the end of the option.
    * `_eq` - Equal to
    * `_gt` - Greater than
    * `_ge` - Greater or equal to
    * `_lt` - Less than
    * `_le` - Less or equal to
    * `_ne` - Not equal to

    **Example:**
    Waveform metadata documents with an availability above 95 percent can thus be found using:
    `percentage_availability_gt=95`
externalDocs:
  description: API Documentation
  url: https://www.orfeus-eu.org/documents/WFCatalog_Specification-v0.22.pdf
paths:
  /query:
    get:
      tags:
        - WFCatalog
      summary: Query waveform metadata
      operationId: wfcatalogGetOpId
      parameters:
        - name: starttime
          in: query
          description: ISO8601
          example: '2020-01-01'
          required: true
          schema:
            type: string
            format: date-time
        - name: endtime
          in: query
          example: '2020-01-02T00:06:00'
          description: ISO8601
          required: true
          schema:
            type: string
            format: date-time
        - name: network
          in: query
          description: (SEED Identifier) SEED Network code
          schema:
            type: string
        - name: station
          in: query
          description: (SEED Identifier) SEED Station code
          schema:
            type: string
        - name: location
          in: query
          description: >-
            (SEED Identifier) SEED Location code. Use -- for blank location
            identifiers.
          example: '00'
          schema:
            type: string
        - name: channel
          in: query
          description: (SEED Identifier) SEED Channel code
          schema:
            type: string
        - name: csegments
          in: query
          description: (Request Option) Include continuous segments
          schema:
            type: boolean
        - name: format
          in: query
          description: (Request Option) Response
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              default: json
              enum:
              - json
        - name: granularity
          in: query
          description: (Request Option) Granularity of metrics
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              default: day
              enum:
              - day
        - name: include
          in: query
          description: (Request Option) Level of detail
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              default: default
              enum:
              - default
              - sample
              - header
              - all
        - name: longestonly
          in: query
          description: (Request Option) Limit to single continuous segment that is the
            longest
          schema:
            type: boolean
        - name: minimumlength
          in: query
          description: (Request Option) Limit to continuous segment longer than this
            length
          schema:
            type: number
            format: float
        - name: encoding
          in: query
          description: (Record Option) Waveform data encoding
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              default: STEIM2
              enum:
              - STEIM2
        - name: num_records
          in: query
          description: (Record Option) Number of records in document
          schema:
            type: integer
        - name: quality
          in: query
          description: (Record Option) SEED Quality code
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              default: D
              enum:
              - D
              - R
              - Q
              - M
        - name: record_length
          in: query
          description: (Record Option) Record length
          schema:
            type: integer
        - name: sample_rate
          in: query
          description: (Record Option) Number of samples per second
          schema:
            type: number
            format: float
        - name: max_gap
          in: query
          description: (Sample Metric Option) Maximum gap length in seconds
          schema:
            type: number
            format: float
        - name: max_overlap
          in: query
          description: (Sample Metric Option) Maximum overlap length in seconds
          schema:
            type: number
            format: float
        - name: num_gaps
          in: query
          description: (Sample Metric Option) Number of gaps
          schema:
            type: integer
        - name: num_overlaps
          in: query
          description: (Sample Metric Option) Number of overlaps
          schema:
            type: integer
        - name: num_samples
          in: query
          description: (Sample Metric Option) Number of samples
          schema:
            type: integer
        - name: percent_availability
          in: query
          description: (Sample Metric Option) Percentage of available data
          schema:
            type: integer
        - name: sample_max
          in: query
          description: (Sample Metric Option) Maximum sample value
          schema:
            type: integer
        - name: sample_min
          in: query
          description: (Sample Metric Option) Minimum sample value
          schema:
            type: integer
        - name: sample_mean
          in: query
          description: (Sample Metric Option) Mean sample value
          schema:
            type: integer
        - name: sample_rms
          in: query
          description: (Sample Metric Option) Quadratic mean of samples
          schema:
            type: number
            format: float
        - name: sample_stdev
          in: query
          description: (Sample Metric Option) Standard deviation of samples
          schema:
            type: number
            format: float
        - name: sample_lower_quartile
          in: query
          description: (Sample Metric Option) 25th percentile of samples
          schema:
            type: number
            format: float
        - name: sample_median
          in: query
          description: (Sample Metric Option) 50th percentile of samples
          schema:
            type: number
            format: float
        - name: sample_upper_quartile
          in: query
          description: (Sample Metric Option) 75th percentile of samples
          schema:
            type: number
            format: float
        - name: sum_gaps
          in: query
          description: (Sample Metric Option) Sum of data gaps in seconds
          schema:
            type: number
            format: float
        - name: sum_overlaps
          in: query
          description: (Sample Metric Option) Sum of data overlaps in seconds
          schema:
            type: number
            format: float
        - name: amplifier_saturation
          in: query
          description: (Header Flag Option) Data with quality flags bit 0 set
          schema:
            type: integer
        - name: calibration_signal
          in: query
          description: (Header Flag Option) Data with activity flags bit 0 set
          schema:
            type: integer
        - name: clock_locked
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 5 set
          schema:
            type: integer
        - name: digital_filter_charging
          in: query
          description: (Header Flag Option) Data with data quality flags bit 6 set
          schema:
            type: integer
        - name: digitizer_clipping
          in: query
          description: (Header Flag Option) Data with data quality flags bit 1 set
          schema:
            type: integer
        - name: start_time_series
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 3 set
          schema:
            type: integer
        - name: end_time_series
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 4 set
          schema:
            type: integer
        - name: event_begin
          in: query
          description: (Header Flag Option) Data with activity flags bit 2 set
          schema:
            type: integer
        - name: event_end
          in: query
          description: (Header Flag Option) Data with activity flags bit 3 set
          schema:
            type: integer
        - name: event_in_progress
          in: query
          description: (Header Flag Option) Data with activity flags bit 6 set
          schema:
            type: integer
        - name: glitches
          in: query
          description: (Header Flag Option) Data with data quality flags bit 3 set
          schema:
            type: integer
        - name: long_record_read
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 1 set
          schema:
            type: integer
        - name: missing_padded_data
          in: query
          description: (Header Flag Option) Data with data quality flags bit 4 set
          schema:
            type: integer
        - name: positive_leap
          in: query
          description: (Header Flag Option) Data with activity flags bit 4 set
          schema:
            type: integer
        - name: short_record_read
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 2 set
          schema:
            type: integer
        - name: spikes
          in: query
          description: (Header Flag Option) Data with data quality flags bit 2 set
          schema:
            type: integer
        - name: station_volume
          in: query
          description: (Header Flag Option) Data with io-and-clock flags bit 0 set
          schema:
            type: integer
        - name: suspect_time_tag
          in: query
          description: (Header Flag Option) Data with data quality flags bit 7 set
          schema:
            type: integer
        - name: telemetry_sync_error
          in: query
          description: (Header Flag Option) Data with data quality flags bit 5 set
          schema:
            type: integer
        - name: time_correction_applied
          in: query
          description: (Header Flag Option) Data with activity flags bit 1 set
          schema:
            type: integer
        - name: timing_correction
          in: query
          description: (Timing Quality Option) Data with header field 16 to non-zero
          schema:
            type: integer
        - name: timing_quality_max
          in: query
          description: (Timing Quality Option) Maximum timing quality value
          schema:
            type: number
            format: float
        - name: timing_quality_min
          in: query
          description: (Timing Quality Option) Minimum timing quality value
          schema:
            type: number
            format: float
        - name: timing_quality_mean
          in: query
          description: (Timing Quality Option) Mean timing quality value
          schema:
            type: number
            format: float
        - name: timing_quality_median
          in: query
          description: (Timing Quality Option) 50th percentile of timing quality values
          schema:
            type: number
            format: float
        - name: timing_quality_lower_quartile
          in: query
          description: (Timing Quality Option) 25th percentile of timing quality values
          schema:
            type: number
            format: float
        - name: timing_quality_upper_quartile
          in: query
          description: (Timing Quality Option) 75th percentile of timing quality values
          schema:
            type: number
            format: float
      responses:
        200:
          description: Successful request, results follow
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WfCatalogResponseObject'
        204:
          description: Request was properly formatted and submitted but no data matches
            the selection
          content: {}
        400:
          description: Bad request due to improper specification, unrecognised parameter,
            parameter value out of range, etc.
          content: {}
        413:
          description: Request would result in too much data being returned or the
            request itself is too large. Returned error message should include the
            service limitations in the detailed description. Service limits should
            be documented in the WADL
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Service temporarily unavailable, used in maintenance mode
          content: {}
    post:
      tags:
        - WFCatalog
      summary: Query waveform metadata
      operationId: wfcatalogPostOpId
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              example: |
                CH HASLI * BHZ 2020-01-01 2020-01-02
              type: string
              format: binary
      responses:
        200:
          description: Successful request, results follow
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WfCatalogResponseObject'
        204:
          description: Request was properly formatted and submitted but no data matches
            the selection
          content: {}
        400:
          description: Bad request due to improper specification, unrecognised parameter,
            parameter value out of range, etc.
          content: {}
        413:
          description: Request would result in too much data being returned or the
            request itself is too large. Returned error message should include the
            service limitations in the detailed description. Service limits should
            be documented in the WADL
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Service temporarily unavailable, used in maintenance mode
          content: {}
  /version:
    get:
      tags:
        - WFCatalog
      summary: Request the service version
      responses:
        '200':
          description: Returns the service version.
          content:
            text/plain: {}
  /application.wadl:
    get:
      tags:
        - WFCatalog
      summary: The application documentation in a .wadl file.
      responses:
        '200':
          description: >-
            The documentation of the dataselect application will be returned in
            a *.wadl format.
          content:
            application/xml: {}
components:
  schemas:
    WfCatalogResponseObject:
      type: object
      properties:
        version:
          type: string
          example: 1.0.0
        producer:
          $ref: '#/components/schemas/Producer'
        station:
          type: string
          example: HGN
        network:
          type: string
          example: NL
        location:
          type: string
          example: "02"
        channel:
          type: string
          example: BHE
        num_gaps:
          type: integer
          example: 0
        num_overlaps:
          type: integer
          example: 0
        sum_gaps:
          type: number
          format: float
          example: 0.0
        sum_overlaps:
          type: number
          format: float
          example: 0.0
        max_gap:
          type: number
          description: Nullable!
          format: float
        max_overlap:
          type: number
          description: Nullable!
          format: float
        record_length:
          $ref: '#/components/schemas/RecordLength'
        sample_rate:
          $ref: '#/components/schemas/SampleRate'
        percent_availability:
          type: integer
          example: 100
        encoding:
          $ref: '#/components/schemas/Encoding'
        num_records:
          type: integer
          example: 9268
        start_time:
          type: string
          format: date-time
          example: 2017-11-20T00:00:00Z
        end_time:
          type: string
          format: date-time
          example: 2017-11-21T00:00:00Z
        format:
          type: string
          enum:
          - json
        quality:
          type: string
          enum:
          - D
          - R
          - Q
          - M
        sample_min:
          type: integer
          example: -32279
        sample_max:
          type: integer
          example: 33696
        sample_mean:
          type: number
          format: float
          example: 260.6385
        sample_median:
          type: number
          format: float
          example: 266.0
        sample_stdev:
          type: number
          format: float
          example: 1980.837
        sample_rms:
          type: number
          format: float
          example: 1997.9109
        sample_lower_quartile:
          type: number
          format: float
          example: -1004.0
        sample_upper_quartile:
          type: number
          format: float
          example: 1505.0
    Producer:
      type: object
      properties:
        name:
          type: string
          example: ORFEUS ODC/KNMI
        agent:
          type: string
          example: ObsPy mSEED-QC
        created:
          type: string
          example: 2017-11-21T04:52:02.819Z
    RecordLength:
      type: object
      properties:
        array:
          type: array
          items:
            type: integer
            example: 512
    SampleRate:
      type: object
      properties:
        array:
          type: array
          items:
            type: integer
            example: 40
    Encoding:
      type: object
      properties:
        array:
          type: array
          items:
            type: string
            example: STEIM2
